diff --git a/libyul/optimiser/FullInliner.cpp b/libyul/optimiser/FullInliner.cpp
index 3bf00282c..b784aabbe 100644
--- a/libyul/optimiser/FullInliner.cpp
+++ b/libyul/optimiser/FullInliner.cpp
@@ -190,9 +190,9 @@ bool FullInliner::shallInline(FunctionCall const& _funCall, YulString _callSite)
 
 	// No inlining of calls where argument expressions may have side-effects.
 	// To avoid running into this, make sure that ExpressionSplitter runs before FullInliner.
-	for (auto const& argument: _funCall.arguments)
-		if (!std::holds_alternative<Literal>(argument) && !std::holds_alternative<Identifier>(argument))
-			return false;
+	//for (auto const& argument: _funCall.arguments)
+	//	//if (!std::holds_alternative<Literal>(argument) && !std::holds_alternative<Identifier>(argument))
+	//		return false;
 
 	// Inline really, really tiny functions
 	size_t size = m_functionSizes.at(calledFunction->name);
@@ -312,7 +312,7 @@ std::vector<Statement> InlineModifier::performInline(Statement& _statement, Func
 		newStatements.emplace_back(std::move(varDecl));
 	};
 
-	for (auto&& [parameter, argument]: ranges::views::zip(function->parameters, _funCall.arguments) | ranges::views::reverse)
+	for (auto&& [parameter, argument]: ranges::views::zip(function->parameters, _funCall.arguments))
 		newVariable(parameter, &argument);
 	for (auto const& var: function->returnVariables)
 		newVariable(var, nullptr);
