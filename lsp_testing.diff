Only in .reference/solidity: .git
diff -r .reference/solidity/README.md ./fun-with-lsp/README.md
1c1
< # The Solidity Contract-Oriented Programming Language
---
> I just want the lsp.
3,7d2
< [![Matrix Chat](https://img.shields.io/badge/Matrix%20-chat-brightgreen?style=plastic&logo=matrix)](https://matrix.to/#/#ethereum_solidity:gitter.im)
< [![Gitter Chat](https://img.shields.io/badge/Gitter%20-chat-brightgreen?style=plastic&logo=gitter)](https://gitter.im/ethereum/solidity)
< [![SolidityÂ Forum](https://img.shields.io/badge/Solidity_Forum%20-discuss-brightgreen?style=plastic&logo=discourse)](https://forum.soliditylang.org/)
< [![X Follow](https://img.shields.io/twitter/follow/solidity_lang?style=plastic&logo=x)](https://X.com/solidity_lang)
< [![Mastodon Follow](https://img.shields.io/mastodon/follow/000335908?domain=https%3A%2F%2Ffosstodon.org%2F&logo=mastodon&style=plastic)](https://fosstodon.org/@solidity)
9c4
< You can talk to us on Gitter and Matrix, tweet at us on X (previously Twitter) or create a new topic in the Solidity forum. Questions, feedback, and suggestions are welcome!
---
> todo: remove all the non lsp logic.
11,92d5
< Solidity is a statically typed, contract-oriented, high-level language for implementing smart contracts on the Ethereum platform.
< 
< For a good overview and starting point, please check out the official [Solidity Language Portal](https://soliditylang.org).
< 
< ## Table of Contents
< 
< - [Background](#background)
< - [Build and Install](#build-and-install)
< - [Example](#example)
< - [Documentation](#documentation)
< - [Development](#development)
< - [Maintainers](#maintainers)
< - [License](#license)
< - [Security](#security)
< 
< ## Background
< 
< Solidity is a statically-typed curly-braces programming language designed for developing smart contracts
< that run on the Ethereum Virtual Machine. Smart contracts are programs that are executed inside a peer-to-peer
< network where nobody has special authority over the execution, and thus they allow anyone to implement tokens of value,
< ownership, voting, and other kinds of logic.
< 
< When deploying contracts, you should use the latest released version of
< Solidity. This is because breaking changes, as well as new features and bug fixes, are
< introduced regularly. We currently use a 0.x version
< number [to indicate this fast pace of change](https://semver.org/#spec-item-4).
< 
< ## Build and Install
< 
< Instructions about how to build and install the Solidity compiler can be
< found in the [Solidity documentation](https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source).
< 
< 
< ## Example
< 
< A "Hello World" program in Solidity is of even less use than in other languages, but still:
< 
< ```solidity
< // SPDX-License-Identifier: MIT
< pragma solidity >=0.6.0 <0.9.0;
< 
< contract HelloWorld {
<     function helloWorld() external pure returns (string memory) {
<         return "Hello, World!";
<     }
< }
< ```
< 
< To get started with Solidity, you can use [Remix](https://remix.ethereum.org/), which is a
< browser-based IDE. Here are some example contracts:
< 
< 1. [Voting](https://docs.soliditylang.org/en/latest/solidity-by-example.html#voting)
< 2. [Blind Auction](https://docs.soliditylang.org/en/latest/solidity-by-example.html#blind-auction)
< 3. [Safe remote purchase](https://docs.soliditylang.org/en/latest/solidity-by-example.html#safe-remote-purchase)
< 4. [Micropayment Channel](https://docs.soliditylang.org/en/latest/solidity-by-example.html#micropayment-channel)
< 
< ## Documentation
< 
< The Solidity documentation is hosted using [Read the Docs](https://docs.soliditylang.org).
< 
< ## Development
< 
< Solidity is still under development. Contributions are always welcome!
< Please follow the
< [Developers Guide](https://docs.soliditylang.org/en/latest/contributing.html)
< if you want to help.
< 
< You can find our current feature and bug priorities for forthcoming
< releases in the [projects section](https://github.com/ethereum/solidity/projects).
< 
< ## Maintainers
< The Solidity programming language and compiler are open-source community projects governed by a core team.
< The core team is sponsored by the [Ethereum Foundation](https://ethereum.foundation/).
< 
< ## License
< Solidity is licensed under [GNU General Public License v3.0](LICENSE.txt).
< 
< Some third-party code has its [own licensing terms](cmake/templates/license.h.in).
< 
< ## Security
< 
< The security policy may be [found here](SECURITY.md).
Only in ./fun-with-lsp: build
diff -r .reference/solidity/cmake/scripts/buildinfo.cmake ./fun-with-lsp/cmake/scripts/buildinfo.cmake
37c37
< 		COMMAND git --git-dir=${ETH_SOURCE_DIR}/.git --work-tree=${ETH_SOURCE_DIR} rev-parse --short=8 HEAD
---
> 		COMMAND git --git-dir=${ETH_SOURCE_DIR}/../.git --work-tree=${ETH_SOURCE_DIR} rev-parse --short=8 HEAD
41c41
< 		COMMAND git --git-dir=${ETH_SOURCE_DIR}/.git --work-tree=${ETH_SOURCE_DIR} diff HEAD --shortstat
---
> 		COMMAND git --git-dir=${ETH_SOURCE_DIR}/../.git --work-tree=${ETH_SOURCE_DIR} diff HEAD --shortstat
Only in ./fun-with-lsp: deps
Only in ./fun-with-lsp: example_request.json
diff -r .reference/solidity/libsolidity/lsp/LanguageServer.cpp ./fun-with-lsp/libsolidity/lsp/LanguageServer.cpp
330a331,368
> bool LanguageServer::readFromIO(std::string value){
> 	/*
> 		Read in the json file directly.
> 	*/
> 	Json::Value jsonMessageParsed;
> 	std::string jsonParsingErrors;
> 	solidity::util::jsonParseStrict(value, jsonMessageParsed, &jsonParsingErrors);
> 	if (!jsonParsingErrors.empty() || !jsonMessageParsed || !jsonMessageParsed.isObject())
> 	{
> 		lspDebug(fmt::format("failed to parse json"));
> 		return false;
> 	}
> 
> 	std::optional<Json::Value> const jsonMessage = {std::move(jsonMessageParsed)};
> 	if (!jsonMessage){
> 		lspDebug(fmt::format("failed to parse json"));
> 		return false;
> 	}
> 
> 	MessageID id;
> 	if ((*jsonMessage)["method"].isString())
> 	{
> 		std::string const methodName = (*jsonMessage)["method"].asString();
> 		id = (*jsonMessage)["id"];
> 		printf("received method call: %s", methodName.c_str());
> 
> 		if (auto handler = util::valueOrDefault(m_handlers, methodName))
> 			handler(id, (*jsonMessage)["params"]);
> 		else
> 			printf("unknown method call: %s", methodName.c_str());
> 
> 	} else {		
> 		lspDebug(fmt::format("failed eroor with getting method"));
> 	}
> 
> 	return true;
> }
> 
332a371
> 
diff -r .reference/solidity/libsolidity/lsp/LanguageServer.h ./fun-with-lsp/libsolidity/lsp/LanguageServer.h
76a77
> 	bool readFromIO(std::string value);
Only in .reference/solidity: lsp_testing.diff
diff -r .reference/solidity/solc/CommandLineInterface.cpp ./fun-with-lsp/solc/CommandLineInterface.cpp
609a610
> 		m_options.input.mode != InputMode::LanguageIO &&
754a756,763
> 	case InputMode::LanguageIO:{
> 		// Currently we expect it to come from stdin, but should not be the case in the future.
> 		std::string value = readUntilEnd(m_sin);
> 		sout() << value << std::endl;
> 
> 		commandLineIO();
> 		break;
> 	}
1077a1087,1101
> 
> void CommandLineInterface::commandLineIO()
> {
> 	sout() << "stdin ::" << std::endl << std::endl;
> 	// transport is not needed
> 	std::string m_standardJsonInput = util::readFileAsString("/Users/brage/Desktop/example_request.json"); // readUntilEnd(m_sin);
> 	sout() << m_standardJsonInput << std::endl << std::endl;
> 	sout() << "====" << std::endl << std::endl;
> 
> 	lsp::StdioTransport transport;
> 	lsp::LanguageServer{transport}.readFromIO(m_standardJsonInput);
> 	// exit nicely
> 	exit(0);
> }
> 
1079a1104
> 	sout() << "starting lsp server" << std::endl << std::endl;
diff -r .reference/solidity/solc/CommandLineInterface.h ./fun-with-lsp/solc/CommandLineInterface.h
90a91
> 	void commandLineIO();
diff -r .reference/solidity/solc/CommandLineParser.cpp ./fun-with-lsp/solc/CommandLineParser.cpp
65a66
> static std::string const g_strLSPIO = "lspio";
147a149
> 	{InputMode::LanguageIO, "language IO"},
487a490
> 		case InputMode::LanguageIO:
688a692,695
> 		(
> 			g_strLSPIO.c_str(),
> 			"langauge server io"
> 		)
959a967
> 		g_strLSPIO,
972a981,982
> 	else if (m_args.count(g_strLSPIO))
> 		m_options.input.mode = InputMode::LanguageIO;
1030a1041,1042
> 		return;
> 	if (m_options.input.mode == InputMode::LanguageIO)
diff -r .reference/solidity/solc/CommandLineParser.h ./fun-with-lsp/solc/CommandLineParser.h
60c60,61
< 	EVMAssemblerJSON
---
> 	EVMAssemblerJSON,
> 	LanguageIO
